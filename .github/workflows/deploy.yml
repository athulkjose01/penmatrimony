name: Deploy Pentecost Matrimony to EC2 (Diagnostic Mode)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Execute Diagnostic Script on EC2
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'bash -s' <<'ENDSSH'
            # --- Start of Diagnostic Script on EC2 ---

            # Define directories for clarity
            PROJECT_BASE_DIR="/var/www/matrimony"
            REPO_DIR="$PROJECT_BASE_DIR/repo"

            # Go to the repository directory
            cd $REPO_DIR

            # Ensure the code is up-to-date from the 'main' branch
            git pull origin main

            echo "---"
            echo "--- 1. PROVING THE CODE IS UP-TO-DATE ---"
            echo "The latest commit on the server is:"
            git log -1 --pretty=format:"%h - %s (%an, %ar)"
            echo "---"
            echo

            echo "---"
            echo "--- 2. PROVING THE settings.py FILE CONTENT ---"
            echo "The content of matrimonial/settings.py is:"
            # IMPORTANT: If your settings.py is not in a 'matrimonial' folder, change the path below
            cat $REPO_DIR/matrimonial/settings.py
            echo "---"
            echo

            echo "---"
            echo "--- 3. ACTIVATING VIRTUAL ENVIRONMENT ---"
            source $PROJECT_BASE_DIR/venv/bin/activate
            echo "Virtual environment activated."
            echo "---"
            echo

            echo "---"
            echo "--- 4. ASKING DJANGO DIRECTLY ABOUT ITS SETTINGS ---"
            # This is the definitive test. We ask the running application what it sees.
            python manage.py shell <<EOF
            import os
            from django.conf import settings
            from django.core.exceptions import ImproperlyConfigured

            print('--- Django Settings Diagnosis ---')
            print(f"DJANGO_SETTINGS_MODULE is: {os.environ.get('DJANGO_SETTINGS_MODULE')}")
            print(f"DEBUG value is: {settings.DEBUG}")

            try:
                print(f"STATIC_ROOT value is: {settings.STATIC_ROOT}")
            except (ImproperlyConfigured, AttributeError):
                print("STATIC_ROOT IS NOT DEFINED according to Django.")

            print(f"STATIC_URL value is: {settings.STATIC_URL}")
            print(f"STATICFILES_DIRS value is: {settings.STATICFILES_DIRS}")
            print('--- End Diagnosis ---')
            EOF
            echo "---"
            echo

            echo "---"
            echo "--- 5. ATTEMPTING THE ORIGINAL COMMAND (it will likely fail again) ---"
            # Using --verbosity 2 to get more detailed output
            python manage.py collectstatic --noinput --verbosity 2
            echo "---"
            echo

            echo "--- Diagnostic script finished. ---"

            # --- End of Diagnostic Script on EC2 ---
          ENDSSH